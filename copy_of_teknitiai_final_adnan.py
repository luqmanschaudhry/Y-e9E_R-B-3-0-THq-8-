# -*- coding: utf-8 -*-
"""Copy of TeknitiAI_Final_Adnan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UqytvdhCmeIQhqX1NVPNE2ExWoFt7SzZ

**This Notebook has Following Components**


1.   Install Dependencies and defining Keys
2.   Take User Prompt
3.   Extract Proprty Information from the Prompt
4.   Define Property Parameters including default values
5.   Call APIs to extract Information section by section and create individual section
6.   Generate full report using all sections
7. Format the report

# 1 Installing Dependencies and defining keys
"""

import re
import google.generativeai as genai
import json
import requests
from google import genai
from docx import Document
import time
import os

# Ensure the script saves the file in the correct directory
script_dir = os.path.dirname(os.path.abspath(__file__))  # Get the script directory
output_filename = os.path.join(script_dir, "Formatted_Final_Real_Estate_Report_Reviewed.docx")  # Ensure it saves in the right directory

from google import genai

client = genai.Client(api_key="AIzaSyC8ZeJmgxfcdreu0HCMoQxkQ38oHz9f8vg")

api_key = "TBUNNQNKO3" #tekniti Paid Key

"""# 2 Take User Prompt"""

# Modify input section to accept Streamlit input
import os

# Get input from Streamlit via environment variable if available
input_prompt1 = os.getenv("USER_INPUT", "I am interested in a property at 10 Hubert Road post code NN8 6DA. It is a 4 bedroom semi-detached house with 3 bathrooms")

print(f"Received User Input: {input_prompt1}")  # Debugging

section_summaries={}

"""**Extracting information from Input Prompt using GenAI**

# 3 Extracting Information
"""

import re
import google.generativeai as genai
import json

def extract_property_details_llm(text):
    prompt = f"""
    Extract structured property details from the following text:

    "{text}"

    Return the output as a JSON object with the following keys:
    - House number
    - Postcode
    - Number of bedrooms
    - Type of property
    - Number of bathrooms

    If a value is missing, return it as null.  Ensure the JSON is valid and parsable.  Do not include any Markdown code blocks or other formatting around the JSON.  Just the plain JSON object.
    """

    response = client.models.generate_content(
        model="gemini-2.0-flash",
        contents=[prompt]
    )

    raw_output = response.text

    # 1. Remove Markdown code block if present:
    json_string = raw_output.replace("```json", "").replace("```", "").strip()  # Clean up

    try:
        # 2. Attempt to parse the JSON string.
        extracted_data = json.loads(json_string)
        return extracted_data
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON: {e}")
        print(f"Raw LLM Output: {raw_output}")  # Print for debugging
        print(f"JSON String: {json_string}")  # Print the cleaned JSON string
        return None  # Or handle the error as needed


# # Example user input
# text = "I am buying a property at 10 Hubert Road post code NN8 6DA. It is a 3 bed room semi detached house."

# Extract details using LLM
extracted_info = extract_property_details_llm(input_prompt1)

if extracted_info:  # Check if parsing was successful
    print(extracted_info)

    house_number = extracted_info.get("House number")
    postcode = extracted_info.get("Postcode")
    bedrooms = extracted_info.get("Number of bedrooms")
    property_type = extracted_info.get("Type of property")
    bathrooms = extracted_info.get("Number of bathrooms")

    print(f"House Number: {house_number}")
    print(f"Postcode: {postcode}")
    print(f"Bedrooms: {bedrooms}")
    print(f"Property Type: {property_type}")
    print(f"Bathrooms: {bathrooms}")
else:
    print("Failed to extract property details.")

"""## 3.1 Get UPRN from the House Number"""

import requests

def get_uprn(api_key, postcode, house_number):
    """
    Retrieves the UPRN for a property given a postcode and house number.

    Args:
        api_key: Your API key.
        postcode: The UK postcode.
        house_number: The house number.

    Returns:
        The UPRN if found, otherwise None.  Also returns the full API response.
    """

    url = f"https://api.propertydata.co.uk/uprns?key={api_key}&postcode={postcode}&strict=true"

    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise an exception for bad status codes (4xx or 5xx)
        data = response.json()

        if data["status"] == "success":
            for entry in data["data"]:
                if house_number.lower() in entry["address"].lower(): # Case-insensitive comparison
                    return entry["uprn"], data  # Return UPRN and the full response

            return None, data # House number not found in the postcode's results
        else:
            return None, data # API returned an error status

    except requests.exceptions.RequestException as e:
        print(f"Error during API request: {e}")
        return None, None # Indicate an issue with the request itself

# Example usage (replace with your actual API key and house number)
# api_key = "FMCGXJRNBU"  # Replace with your API key
# postcode = "NN8 6DA"
# house_number = "10"

uprn, api_response = get_uprn(api_key, postcode, house_number)

if uprn:
    print(f"UPRN for {house_number}, {postcode}: {uprn}")
else:
    if api_response and api_response["status"] != "success":
        print(f"API Error: {api_response.get('error', 'Unknown error')}") # Print API error if available
    elif api_response:
      print(f"House number '{house_number}' not found in the results for postcode '{postcode}'.")
    else:
        print("Failed to retrieve UPRN due to a request error.")


# You can also access the full API response if needed:
# if api_response:
#     print(api_response)

"""# 4 Defining Parameter Values"""

# Standardized property parameters
property_type = "semi-detached_house"
construction_date = "2000_onwards"
internal_area = 1400  # sq ft
finish_quality = "high"
outdoor_space = "garden"
off_street_parking = 3
region = "east_midlands"

# Standardized parameters for build cost
internal_area = 1400  # sq ft
finish_quality1 = "premium"
project_type = "new_build"

# Standardized parameters for development calculator
purchase_price = 600000
sqft_pre_development = 1400
sqft_post_development = 1800
dev_project_type = "refurbish"
dev_finish_quality = "basic"

"""# 5 Report Generation Section

## 5.1 Property Overview
"""

import requests


# API Endpoint (Only UPRN)
endpoints = {
    "uprn": f"https://api.propertydata.co.uk/uprn?key={api_key}&uprn={uprn}"
}

# Function to make API requests
def fetch_data(url):
    response = requests.get(url)
    print(f"\nFetching data from: {url}")  # Debugging URL

    try:
        data = response.json()
        print("Status Code:", response.status_code)
        if response.status_code == 200 and data.get("status") == "success":
            return data
        else:
            print("Error:", data.get("message", "Unknown error"))
            return None
    except:
        print("Failed to parse JSON response")
        return None

# Fetch data from UPRN API
results = {}
for key, url in endpoints.items():
    results[key] = fetch_data(url)

# Prepare data for Gemini API
gemini_system_prompt = """
You are an AI assistant tasked with writing a section of a professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

I will provide you with information from an external UPRN API to generate this section of the report.
The focus of this section of the report is just a brief overview. So keep it brief.
Do not mention any external API references.

Format the report section for a Word document, using appropriate headings, bullet points,
and other formatting elements to highlight key insights and improve readability.
Be concise and professional in your writing style. Focus on clarity and accuracy.
"""

# Add UPRN data to the prompt
if results.get("uprn"):
    gemini_system_prompt += f"\nUPRN Information: {results['uprn']}"

# Send data to Gemini API for report generation
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_system_prompt]
)

# Store the result in `section_summaries`
section_summaries[(postcode, "Property Overview")] = response.text


"""## 5.2 Location and Area Insights"""

import requests
from docx import Document



# API Endpoints
endpoints = {
    "area_type": f"https://api.propertydata.co.uk/area-type?key={api_key}&postcode={postcode}",
    "crime": f"https://api.propertydata.co.uk/crime?key={api_key}&postcode={postcode}",
    "aonb": f"https://api.propertydata.co.uk/aonb?key={api_key}&postcode={postcode}",
    "conservation_area": f"https://api.propertydata.co.uk/conservation-area?key={api_key}&postcode={postcode}",
    "postcode_stats": f"https://api.propertydata.co.uk/postcode-key-stats?key={api_key}&region={region}"
}

# Function to fetch API data
def fetch_data(url, api_name):
    response = requests.get(url)
    print(f"\nFetching {api_name} data from: {url}")
    print(f"Status Code: {response.status_code}")

    try:
        data = response.json()
        if response.status_code == 200 and ("status" not in data or data.get("status") in [200, "success"]):
            return data
        else:
            print(f"Error in {api_name} API:", data.get("message", "Unknown error"))
            return None
    except:
        print(f"Failed to parse JSON response for {api_name} API")
        return None

# Fetch data from all APIs
results = {api: fetch_data(url, api) for api, url in endpoints.items()}

# Prepare data for Gemini API
gemini_system_prompt = """
You are an AI assistant tasked with writing a section of a professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

This particular section is about location and area insights.

I will provide you with information from an external API to generate the report.
In your report, use 4 subsections - subsection 1 is about the area type, subsection 2 is about the crime rate and statistics.
Subsection 3 is about if the area is part of area of natural beauty or conservation area. And section 4 is about key stats. Section 4
is important, please provide key inisght to the customer with stats for average rent, average yield and growth.

Do not mention any external API references.


Format the report section for a Word document, using appropriate headings, bullet points,
and other formatting elements to highlight key insights and improve readability.
Be concise and professional in your writing style. Focus on clarity and accuracy.
"""

for key, data in results.items():
    if data:
        gemini_system_prompt += f"\n{key.replace('_', ' ').title()} Information: {data}"

# Send data to Gemini API for report generation
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_system_prompt]
)

section_summaries[(postcode, "Location and Area Insights")] = response.text



"""## 5.3 Market Analysis of property"""

import requests
from docx import Document


# Extract first half of postcode
postcode_first_half = postcode.split()[0]

# Define API endpoints
endpoints = {
    "prices": f"https://api.propertydata.co.uk/prices?key={api_key}&postcode={postcode}&bedrooms={bedrooms}",
    "prices_per_sqf": f"https://api.propertydata.co.uk/prices-per-sqf?key={api_key}&postcode={postcode}",
    "growth": f"https://api.propertydata.co.uk/growth?key={api_key}&postcode={postcode}",
    "demand": f"https://api.propertydata.co.uk/demand?key={api_key}&postcode={postcode}",
    "rental_demand": f"https://api.propertydata.co.uk/demand-rent?key={api_key}&postcode={postcode_first_half}"
}

# Function to fetch API data
def fetch_data(url, api_name):
    response = requests.get(url)
    print(f"\nFetching {api_name} data from: {url}")
    print(f"Status Code: {response.status_code}")

    try:
        data = response.json()
        if response.status_code == 200 and data.get("status") == "success":
            return data
        else:
            print(f"Error in {api_name} API:", data.get("message", "Unknown error"))
            return None
    except Exception as e:
        print(f"Failed to parse JSON response for {api_name} API: {e}")
        return None

# Fetch data from all APIs
results = {api: fetch_data(url, api) for api, url in endpoints.items()}

# Correct the rental demand filtering logic
if "rental_demand" in results and results["rental_demand"]:
    rental_demand_data = results["rental_demand"]

    # Check if the returned postcode matches the first half of the input postcode
    if rental_demand_data.get("postcode") == postcode_first_half:
        results["rental_demand"] = rental_demand_data  # Keep data as is
    else:
        print(f"No exact rental demand match found for postcode: {postcode_first_half}")
        results["rental_demand"] = None  # Reset if no match

# Prepare data for Gemini API
gemini_system_prompt = """
You are an AI assistant tasked with writing a section of a professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

This particular section of the report is about Market analysis like prices, growth and dmeand.

I will provide you with information from an external API to generate the report.
Do not mention any external API references.


Format the report section for a Word document, using appropriate headings, bullet points,
and other formatting elements to highlight key insights and improve readability.
Be concise and professional in your writing style. Focus on clarity and accuracy.
"""

for key, data in results.items():
    if data:
        gemini_system_prompt += f"\n{key.replace('_', ' ').title()} Information: {data}"

# Send data to Gemini API for report generation
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_system_prompt]
)

section_summaries[(postcode, "Market Analysis")] = response.text



"""## 5.4 Income and Yield Analaysis"""

import requests
from docx import Document



# API Endpoints
endpoints = {
    "household_income": f"https://api.propertydata.co.uk/household-income?key={api_key}&postcode={postcode}",
    "rents_hmo": f"https://api.propertydata.co.uk/rents-hmo?key={api_key}&postcode={postcode}",
    "yields": f"https://api.propertydata.co.uk/yields?key={api_key}&postcode={postcode}",
}

# Function to fetch API data
def fetch_data(url, api_name):
    response = requests.get(url)
    print(f"\nFetching {api_name} data from: {url}")
    print(f"Status Code: {response.status_code}")

    try:
        data = response.json()
        if response.status_code == 200 and data.get("status") == "success":
            return data
        else:
            print(f"Error in {api_name} API:", data.get("message", "Unknown error"))
            return None
    except:
        print(f"Failed to parse JSON response for {api_name} API")
        return None

# Fetch data from all APIs
results = {api: fetch_data(url, api) for api, url in endpoints.items()}

# Prepare data for Gemini API
gemini_system_prompt = """
You are an AI assistant tasked with writing a section of a professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

This particular section of the report is about average household income (GBP) for an area of interest,
statistical average and confidence intervals of the room rental market,
segmented by double / single rooms and ensuite / shared bathroom and
average property yields from the smallest radius at which there is reasonable data.

I will provide you with relevant information from an external API to generate the report.
Do not mention any external API references.

Format the report section for a Word document, using appropriate headings, bullet points,
and other formatting elements to highlight key insights and improve readability.
Be concise and professional in your writing style. Focus on clarity and accuracy.
"""

for key, data in results.items():
    if data:
        gemini_system_prompt += f"\n{key.replace('_', ' ').title()} Information: {data}"

# Send data to Gemini API for report generation
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_system_prompt]
)

section_summaries[(postcode, "Income and Yield Analysis")] = response.text


"""## 5.5 Demographics and Population"""

import requests
from docx import Document



# API Endpoints
endpoints = {
    "population": f"https://api.propertydata.co.uk/population?key={api_key}&postcode={postcode}",
    "demographics": f"https://api.propertydata.co.uk/demographics?key={api_key}&postcode={postcode}",
}

# Function to fetch API data
def fetch_data(url, api_name):
    response = requests.get(url)
    print(f"\nFetching {api_name} data from: {url}")
    print(f"Status Code: {response.status_code}")

    try:
        data = response.json()
        if response.status_code == 200 and data.get("status") == "success":
            return data
        else:
            print(f"Error in {api_name} API:", data.get("message", "Unknown error"))
            return None
    except:
        print(f"Failed to parse JSON response for {api_name} API")
        return None

# Fetch data from both APIs
results = {api: fetch_data(url, api) for api, url in endpoints.items()}

# Prepare data for Gemini API
gemini_system_prompt = """
You are an AI assistant tasked with writing a section of a professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

I will provide you with information from an external API to generate the report.

This particular section is focussed on Demographics and Population Insight.

Create two subsections - one focussed on Demograhpics and second on Population.

Both sub-sections should be comprehensive and provide insights to the customer.

Format the report section for a Word document, using appropriate headings, bullet points,
and other formatting elements to highlight key insights and improve readability.
Be concise and professional in your writing style. Focus on clarity and accuracy.
"""

for key, data in results.items():
    if data:
        gemini_system_prompt += f"\n{key.replace('_', ' ').title()} Information: {data}"

# Send data to Gemini API for report generation
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_system_prompt]
)

section_summaries[(postcode, "Demographics and Population")] = response.text

"""## 5.7 Schools and Amenities"""

import requests
from docx import Document

# User-defined postcode
postcode  # Replace with your target postcode

# API Endpoints
endpoints = {
    "restaurants": f"https://api.propertydata.co.uk/restaurants?key={api_key}&postcode={postcode}",
    "schools": f"https://api.propertydata.co.uk/schools?key={api_key}&postcode={postcode}",
}

# Function to fetch API data
def fetch_data(url, api_name):
    response = requests.get(url)
    print(f"\nFetching {api_name} data from: {url}")
    print(f"Status Code: {response.status_code}")

    try:
        data = response.json()
        if response.status_code == 200 and data.get("status") == "success":
            return data
        else:
            print(f"Error in {api_name} API:", data.get("message", "Unknown error"))
            return None
    except:
        print(f"Failed to parse JSON response for {api_name} API")
        return None

# Fetch data from both APIs
results = {api: fetch_data(url, api) for api, url in endpoints.items()}

# Prepare data for Gemini API
gemini_system_prompt = """
You are an AI assistant tasked with writing a section of a professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

This section is focussed on Resturants and Amenities.

I will provide you with information from an external API to generate the report.
Do not mention any external API references.

Format the report section for a Word document, using appropriate headings, bullet points,
and other formatting elements to highlight key insights and improve readability.
Be concise and professional in your writing style. Focus on clarity and accuracy.
"""

for key, data in results.items():
    if data:
        gemini_system_prompt += f"\n{key.replace('_', ' ').title()} Information: {data}"

# Send data to Gemini API for report generation
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_system_prompt]
)

section_summaries[(postcode, "School and Amenities")] = response.text


"""## 5.8 Safety and Environment


"""

import requests
from docx import Document
from datetime import datetime

# User-defined postcode
postcode  # Replace with your target postcode

# API Endpoints
endpoints = {
    "energy_efficiency": f"https://api.propertydata.co.uk/energy-efficiency?key={api_key}&postcode={postcode}",
    "flood_risk": f"https://api.propertydata.co.uk/flood-risk?key={api_key}&postcode={postcode}",
}

# Function to fetch API data
def fetch_data(url, api_name):
    response = requests.get(url)
    print(f"\nFetching {api_name} data from: {url}")
    print(f"Status Code: {response.status_code}")

    try:
        data = response.json()
        if response.status_code == 200 and data.get("status") == "success":
            return data
        else:
            print(f"Error in {api_name} API:", data.get("message", "Unknown error"))
            return None
    except Exception as e:
        print(f"Failed to parse JSON response for {api_name} API: {e}")
        return None

# Fetch data from both APIs
results = {api: fetch_data(url, api) for api, url in endpoints.items()}

# Prepare data for Gemini API
gemini_system_prompt = f"""
You are an AI assistant tasked with writing a section of a professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

I will provide you with information from an external API to generate the report.

This section is focussed on the safety in terms of flood risk and energy efficiency scores of the
properties in that postcode. We are particulary interested in the house number {house_number}


Format the report section for a Word document, using appropriate headings, bullet points,
and other formatting elements to highlight key insights and improve readability.
Be concise and professional in your writing style. Focus on clarity and accuracy.
"""

for key, data in results.items():
    if data:
        gemini_system_prompt += f"\n{key.replace('_', ' ').title()} Information: {data}"

# Send data to Gemini API for report generation
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_system_prompt]
)

section_summaries[(postcode, "Safety and Environment")] = response.text


"""## 5.9 Council Tax Information"""

import requests
from docx import Document

# User-defined postcode
postcode  # Replace with your target postcode

# API Endpoint
council_tax_url = f"https://api.propertydata.co.uk/council-tax?key={api_key}&postcode={postcode}"

# Function to fetch API data
def fetch_data(url, api_name):
    response = requests.get(url)
    print(f"\nFetching {api_name} data from: {url}")
    print(f"Status Code: {response.status_code}")

    try:
        data = response.json()
        if response.status_code == 200 and data.get("status") == "success":
            return data
        else:
            print(f"Error in {api_name} API:", data.get("message", "Unknown error"))
            return None
    except Exception as e:
        print(f"Failed to parse JSON response for {api_name} API: {e}")
        return None

# Fetch council tax data
council_tax_data = fetch_data(council_tax_url, "Council Tax")

# Prepare data for Gemini API
gemini_system_prompt = f"""
You are an AI assistant tasked with writing a section of a professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

I will provide you with information from an external API to generate the report.
Do not mention any external API references.
This section is focussed on the council taxes of the
properties in that postcode. We are particulary interested in the house number {house_number}

Format the report section for a Word document, using appropriate headings, bullet points,
and other formatting elements to highlight key insights and improve readability.
Be concise and professional in your writing style. Focus on clarity and accuracy.
"""

if council_tax_data:
    gemini_system_prompt += f"\nCouncil Tax Information: {council_tax_data}"

# Send data to Gemini API for report generation
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_system_prompt]
)

section_summaries[(postcode, "Council Tax Information")] = response.text


"""## 5.10 Historical Data and Trends"""

import requests
from docx import Document

# User-defined postcode
postcode  # Replace with your target postcode



# API Endpoints
endpoints = {
    "valuation_rent": f"https://api.propertydata.co.uk/valuation-rent?key={api_key}&postcode={postcode}"
                      f"&internal_area={internal_area}&property_type={property_type}&construction_date={construction_date}"
                      f"&bedrooms={bedrooms}&bathrooms={bathrooms}&finish_quality={finish_quality}"
                      f"&outdoor_space={outdoor_space}&off_street_parking={off_street_parking}",

    "valuation_sale": f"https://api.propertydata.co.uk/valuation-sale?key={api_key}&postcode={postcode}"
                      f"&internal_area={internal_area}&property_type={property_type}&construction_date={construction_date}"
                      f"&bedrooms={bedrooms}&bathrooms={bathrooms}&finish_quality={finish_quality}"
                      f"&outdoor_space={outdoor_space}&off_street_parking={off_street_parking}",

    "sold_prices": f"https://api.propertydata.co.uk/sold-prices?key={api_key}&postcode={postcode}&type={property_type}&max_age=12"
}

# Function to fetch API data
def fetch_data(url, api_name):
    response = requests.get(url)
    print(f"\nFetching {api_name} data from: {url}")
    print(f"Status Code: {response.status_code}")

    try:
        data = response.json()
        if response.status_code == 200 and data.get("status") == "success":
            return data
        else:
            print(f"Error in {api_name} API:", data.get("message", "Unknown error"))
            return None
    except Exception as e:
        print(f"Failed to parse JSON response for {api_name} API: {e}")
        return None

# Fetch data from all APIs
results = {api: fetch_data(url, api) for api, url in endpoints.items()}

# Prepare data for Gemini API
gemini_system_prompt = """
You are an AI assistant tasked with writing a section of a professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

I will provide you with information from an external API to generate the report.
Do not mention any external API references.

This particular section is focussed on historical data and trends specifically focussing on the
rent and sale valuation and sold prices in the region.

This section is an important one from investor point of view to assess long-term investment.

Prepare a comprehensive section based on the data and figures and highlight it in your report.

Format the report section for a Word document, using appropriate headings, bullet points,
and other formatting elements to highlight key insights and improve readability.
Be concise and professional in your writing style. Focus on clarity and accuracy.
"""

for key, data in results.items():
    if data:
        gemini_system_prompt += f"\n{key.replace('_', ' ').title()} Information: {data}"

# Send data to Gemini API for report generation
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_system_prompt]
)

section_summaries[(postcode, "Historical Data and Trends")] = response.text



"""## 5.10 Development Potential"""

import requests
from docx import Document

# User-defined postcode
postcode  # Replace with your target postcode



# API Endpoints
endpoints = {
    "build_cost": f"https://api.propertydata.co.uk/build-cost?key={api_key}&postcode={postcode}"
                  f"&internal_area={internal_area}&finish_quality={finish_quality1}&project_type={project_type}",

    "development_calculator": f"https://api.propertydata.co.uk/development-calculator?key={api_key}"
                              f"&postcode={postcode}&purchase_price={purchase_price}"
                              f"&sqft_pre_development={sqft_pre_development}&sqft_post_development={sqft_post_development}"
                              f"&project_type={dev_project_type}&finish_quality={dev_finish_quality}&return_formatted_strings=true"
}

# Function to fetch API data
def fetch_data(url, api_name):
    response = requests.get(url)
    print(f"\nFetching {api_name} data from: {url}")
    print(f"Status Code: {response.status_code}")

    try:
        data = response.json()
        if response.status_code == 200 and data.get("status") == "success":
            return data
        else:
            print(f"Error in {api_name} API:", data.get("message", "Unknown error"))
            return None
    except Exception as e:
        print(f"Failed to parse JSON response for {api_name} API: {e}")
        return None

# Fetch data from all APIs
results = {api: fetch_data(url, api) for api, url in endpoints.items()}

# Prepare data for Gemini API
gemini_system_prompt = """
You are an AI assistant tasked with writing a section of a professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

I will provide you with information from an external API to generate the report.
Do not mention any external API references.

This specific section is focussed on estimating development potential for a property
from investment point of view.

API 1 - Build Cost: Along with an internal area (in square feet) and required finish quality,
this endpoint returns the estimated building cost as both total build cost and cost per square foot

API 2 - Development Calculator: For a given full UK postcode, our development calculator combines construction cost data with real-time
market data on values per square foot to help you estimate how much profit a development will make.
Results will be returned as formatted strings for presentation unless the 'return_formatted_strings'
parameter is set to false in which case numeric types will be returned.

Format the report section for a Word document, using appropriate headings, bullet points,
and other formatting elements to highlight key insights and improve readability.
Be concise and professional in your writing style. Focus on clarity and accuracy.
"""

for key, data in results.items():
    if data:
        gemini_system_prompt += f"\n{key.replace('_', ' ').title()} Information: {data}"

# Send data to Gemini API for report generation
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_system_prompt]
)

section_summaries[(postcode, "Development Potential")] = response.text


"""# 6 Producing Executive Summary and Reccomendations"""

from datetime import datetime

# Generate today's date
report_date = datetime.today().strftime("%B %d, %Y")

# **Manually define the order of sections**
ordered_sections = [
    "Property Overview",
    "Location and Area Insights",
    "School and Amenities",
    "Demographics and Population",
    # "Infrastructure and Accessibility",
    "Safety and Environment",
    "Council Tax Information",
    "Market Analysis",
    "Income and Yield Analysis",
    "Historical Data and Trends",
    "Development Potential"
]

# **Step 1: Combine all sections into one text variable (combined_sections)**
combined_sections = f"Real Estate Report – {postcode}\nReport Generation Date: {report_date}\n\n"

for section in ordered_sections:
    key = (postcode, section)
    if key in section_summaries:
        combined_sections += f"## {section} ##\n"
        combined_sections += section_summaries[key] + "\n\n"
        combined_sections += "---\n\n"  # Separator between sections

# **Step 2: Generate Executive Summary**
gemini_prompt_exec_summary = f"""
You are an AI assistant tasked with writing an executive summary for professional real estate report.
This report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.

The following is a detailed real estate report for {postcode}.

**Task:** Create an **Executive Summary** that highlights the key points from the report in a
concise and professional format.

Focus on market trends, investment opportunities, and other notable insights.

## Report Data:
{combined_sections}
"""

exec_summary_response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_prompt_exec_summary]
)

# **Store the Executive Summary**
executive_summary = {
    "postcode": postcode,
    "title": "Executive Summary",
    "content": exec_summary_response.text
}

# **Step 3: Generate Recommendations**
gemini_prompt_recommendations = f"""
You are an AI assistant tasked with writing a recommendations section based on a professional real estate report.
Original report is intended for potential investors, buyers, or sellers.
Its purpose is to provide insights into the real estate market and associated risks.
The following is a detailed real estate report for {postcode}.

**Task:** Provide strategic **Recommendations** based on the report.
Focus on investment decisions, buying/selling opportunities, risk factors, and market positioning.

## Report Data:
{combined_sections}
"""

recommendations_response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_prompt_recommendations]
)

# **Store the Recommendations**
recommendations = {
    "postcode": postcode,
    "title": "Recommendations",
    "content": recommendations_response.text
}

# **Step 4: Store the new sections**
section_summaries[(postcode, "Executive Summary")] = executive_summary["content"]
section_summaries[(postcode, "Recommendations")] = recommendations["content"]

#  **Now, Executive Summary & Recommendations are generated and stored!**

from docx import Document
from datetime import datetime

report_date = datetime.today().strftime("%B %d, %Y")
# Create a new Word document
doc = Document()

# Add title
doc.add_heading(f"Real Estate Report – {postcode}", level=1)
doc.add_paragraph(f"Report Generation Date: {report_date}\n\n")

# **Debugging: Print All Keys in Dictionary**
print("\n Stored Sections in Dictionary:")
for key in section_summaries.keys():
    print(key)  # Check all stored keys


# **Manually define the order of sections**
ordered_sections = [
    ("Executive Summary"),
    ("Property Overview"),
    ("Location and Area Insights"),
    ("School and Amenities"),
    ("Demographics and Population"),
    # ("Infrastructure and Accessibility"),
    ("Safety and Environment"),
    ("Council Tax Information"),
    ("Market Analysis"),
    ("Income and Yield Analysis"),
    ("Historical Data and Trends"),
    ("Development Potential"),
    ("Recommendations")
]

# **Manually add sections in the chosen order**
for section in ordered_sections:
    key = (postcode, section)

    if key in section_summaries:
        print(f"\n Adding section: {section}")  # Debugging confirmation
        doc.add_heading(section, level=2)
        doc.add_paragraph(section_summaries[key])
        doc.add_paragraph("\n---\n")  # Add separator between sections
    else:
        print(f" Warning: Section '{section}' not found in dictionary.")

# Save the compiled document
doc.save("Final_Real_Estate_Report.docx")

print("\n### Final Report saved as 'Final_Real_Estate_Report.docx' ###")

"""## 6.2 Reviewing the Report using Gemini"""

from docx import Document
import google.generativeai as genai

def read_docx(file_path):
    """Reads a .docx file and extracts text while maintaining structure."""
    doc = Document(file_path)
    document_text = ""

    for para in doc.paragraphs:
        # Maintain line breaks for better formatting
        document_text += para.text + "\n\n"

    return document_text.strip()

def process_with_gemini(text):
    """Sends extracted document text to Gemini for review and formatting correction."""

    gemini_prompt = f"""
    You are an AI assistant tasked with reviewing and improving the given real estate report.

    **Tasks:**
    1. **Ensure Consistency:** Review the insights, analysis, and make them consistent.
    2. **Enhance Formatting:** Apply proper headings, subheadings, and bullet points.
    3. **Improve Clarity:** Rewrite unclear sections while keeping the original meaning.

    Dont change the original sequence.

    **Document:**
    {text}

    Please return the **corrected and formatted version** in structured text format.
    """

    response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents=[gemini_prompt]
)


    return response.text.strip()

def save_to_docx(text, output_path):
    """Saves the cleaned and formatted text into a new .docx file."""
    doc = Document()

    # Split text into sections and add paragraphs
    for line in text.split("\n"):
        if line.strip():
            doc.add_paragraph(line.strip())

    doc.save(output_path)

# File paths
input_file = "Final_Real_Estate_Report.docx"
output_file = "Final_Real_Estate_Report_Reviewed.docx"

# Step 1: Read the original document
extracted_text = read_docx(input_file)

# Step 2: Process the text with Gemini AI
corrected_text = process_with_gemini(extracted_text)

# Step 3: Save the improved content to a new .docx file
save_to_docx(corrected_text, output_file)

print(f" Process completed. The revised document is saved as {output_file}")

"""## 6.3 Format the Report"""

import re
from docx import Document
from docx.enum.style import WD_STYLE_TYPE
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH

# Load the existing document
doc = Document("Final_Real_Estate_Report_Reviewed.docx")

# Define styles for headings
styles = doc.styles

if "Heading 1" not in styles:
    style = styles.add_style("Heading 1", WD_STYLE_TYPE.PARAGRAPH)
    font = style.font
    font.name = "Arial"
    font.size = Pt(16)
    font.bold = True

if "Heading 2" not in styles:
    style = styles.add_style("Heading 2", WD_STYLE_TYPE.PARAGRAPH)
    font = style.font
    font.name = "Arial"
    font.size = Pt(14)
    font.bold = True

# Extract text from document
full_text = "\n".join([para.text for para in doc.paragraphs])

# Process each line of the document
doc = Document()  # Create a new formatted document
for line in full_text.splitlines():
    line = line.strip()

    # Remove unwanted Markdown-style symbols
    line = re.sub(r"^\s*[*#-]+\s*", "", line)  # Removes *, #, -, at the beginning of lines

    # Apply **bold** formatting
    if "**" in line:
        parts = re.split(r"(\*\*.*?\*\*)", line)  # Splitting by **text**
        paragraph = doc.add_paragraph()
        for part in parts:
            if part.startswith("**") and part.endswith("**"):
                run = paragraph.add_run(part[2:-2])  # Remove ** markers
                run.bold = True
            else:
                paragraph.add_run(part)
        paragraph.alignment = WD_ALIGN_PARAGRAPH.LEFT

    # Apply heading formatting for section titles
    elif ":" in line and line.split(":")[0].istitle():
        paragraph = doc.add_paragraph(line)
        paragraph.style = "Heading 2"

    # Normal text
    else:
        paragraph = doc.add_paragraph(line)
        paragraph.alignment = WD_ALIGN_PARAGRAPH.LEFT

# Save the formatted document
doc.save(output_filename)
print(f"\n### AI-Formatted Report saved as '{output_filename}' ###")


